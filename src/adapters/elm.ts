import fs from "fs";
import path from "path";

import { Adapter, Class } from "../types";

const fileName = "Tailwind.elm";

const generate = (classes: Class[]): string => {
  const elmify = ({ className, name }: Class): string => `

${name} : Tailwind
${name} =
    Tailwind "${className}"
`;

  return `module Tailwind exposing (Tailwind, tailwind, unwrap, ${classes
    .map(cl => cl.name)
    .join(", ")})

-- Generated by tailwind-generator, be careful when editing this file

import Html
import Html.Attributes as Attributes
import List


type Tailwind
    = Tailwind String


unwrap : List Tailwind -> String
unwrap cs =
    cs |> List.map (\\(Tailwind c) -> c) |> String.join " "

tailwind : List Tailwind -> Html.Attribute msg
tailwind cs =
    Attributes.class <| unwrap cs
${classes.map(elmify).join("")}
  `;
};

export const save: Adapter["save"] = (dir, classes) => {
  fs.writeFileSync(path.join(dir, fileName), generate(classes));
};
