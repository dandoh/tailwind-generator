import fs from "fs";
import path from "path";

import { Adapter, Class } from "../types";

const fileName = "Tailwind.re";

const interfaceFileName = "Tailwind.rei";

const generate = (classes: Class[]): string => {
  const reasonalize = ({ className, name }: Class): string => `
let ${name} = Tailwind("${className}");
`;

  return `// Generated by tailwind-generator, be careful when editing this file

type tailwind
  = Tailwind(string)

let tailwind = classes =>
  classes->Belt.List.map((Tailwind(c)) => c)->Belt.List.toArray
  |> Js.Array.joinWith(" ");

let tailwindOpt = classes =>
  classes->Js.List.filterMap((. x) => x, _)->tailwind;
${classes.map(reasonalize).join("")}
  `;
};

const generateInterface = (classes: Class[]): string => {
  const reasonalize = ({ name }: Class): string => `
let ${name} : tailwind;
`;

  return `// Generated by tailwind-generator, be careful when editing this file

type tailwind;

let tailwind : list(tailwind) => string;

let tailwindOpt : list(option(tailwind)) => string;
${classes.map(reasonalize).join("")}
  `;
};

export const save: Adapter["save"] = (dir, classes) => {
  fs.writeFileSync(path.join(dir, fileName), generate(classes));
  fs.writeFileSync(
    path.join(dir, interfaceFileName),
    generateInterface(classes),
  );
};
