import fs from "fs";
import path from "path";

import { Adapter, Class } from "../types";

const fileName = "Tailwind.purs";

const generate = (classes: Class[]): string => {
  const purify = ({ className, name }: Class): string => `
${name} :: Tailwind
${name} =
  Tailwind "${className}"
`;

  return `module Tailwind (
  Tailwind,
  tailwind,
  tailwindOpt,
${classes.map(cl => `  ${cl.name}`).join(",\n")}
  ) where

-- Generated by tailwind-generator, be careful when editing this file

import Prelude ((<<<), map)

import Data.String as String
import Data.Array as Array
import Data.Maybe (Maybe)

newtype Tailwind
  = Tailwind String

unwrap :: Tailwind -> String
unwrap (Tailwind c) = c

tailwind :: Array Tailwind -> String
tailwind = String.joinWith " " <<< map unwrap

tailwindOpt :: Array (Maybe Tailwind) -> String
tailwindOpt = tailwind <<< Array.catMaybes
${classes.map(purify).join("")}
  `;
};

export const save: Adapter["save"] = (dir, classes) => {
  fs.writeFileSync(path.join(dir, fileName), generate(classes));
};
